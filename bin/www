#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var socket = require('../socket/socket')
var dbHandler = require('../socket/dbHandler')
var debug = require('debug')('poker-app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var server  = require('http').createServer(app);

var io = require('socket.io').listen(server);
// io.on('connection',function(socket){
//   socket.on('poker room',function(msg){
//     console.log('socket is invoked from index.js: ');
//     console.log(`message: ${msg}`);
//   })
// });
  // rooms.forEach(room => {
io.of(`/poker`).on('connection',(socket) => {
      console.log('a new user connected to poker namespace');
      socket.emit('welcome','welcome to the poker namespace');
      socket.emit('joinRoom', roomId => {
        dbHandler.database.find({},function(err,rooms) {
          let exists = rooms.filter(room => room._id == roomId) ? true : false;
          console.log(`this room exists: ${exists}`);
          if(exists){
            socket.join(roomId);
            return socket.emit('success','You have succesfully joined to the room');
          }
          else{
            return socket.emit('err', 'you have not joined to a room');
          }
        });
    })
  });
  // })
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
