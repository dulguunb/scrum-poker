#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var dbHandler = require('../socket/dbHandler')
var debug = require('debug')('poker-app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var server = require('http').createServer(app);

var io = require('socket.io').listen(server);
io.of(`/poker`).on('connection', (socket) => {
  console.log('a new user connected to poker namespace');
  socket.emit('welcome', 'welcome to the poker name namespace');
  let roomId;
  let userName;
  let userId;
  socket.on('joinRoom', auth => {
    roomId = auth.roomId;
    userName = auth.userName;
    userId = socket.id;
    socket.auth = auth;
    console.log(`Server: join room  ${roomId}`);
    dbHandler.database.findOne({ _id: roomId }, (err, room) => {
      if (err) {
        console.log('error has been occured during database findOne:roomId');
        console.log(err);
      }
      if (room.users != undefined) {
        io.of('/poker').in(roomId).emit("joinRoom", room.users);
      }
      else {

      }
    });
    dbHandler.database.findOne({ _id: roomId }, (err, room) => {
      if (err) {
        console.log('error occured');
        console.log(err);
      }
      console.log(`username: ${userName} | userId ${userId} has joined to room ${roomId}`);
      socket.join(roomId);
      let admin = false
      console.log(`room: `);
      console.log(room)
      if (room.users == undefined) {
        room.users = [];
        admin = true;
      }
      room.users.push({ name: userName, id: userId, admin: admin, score: 0 });
      // Update the joined users
      dbHandler.database.update({ _id: roomId }, { users: room.users }, (err, numReplaced) => {
        if (err) {
          console.log(err);
        } else {
          console.log(`num of Replaced : ${numReplaced}`);
        }
      });
      io.of('/poker').in(roomId).emit("newUser", room.users);
      return socket.emit('success', `You have succesfully joined to the room: ${roomId}`);
    });
    // socket.disconnect();
    socket.on('voteScore', modifiedUser => {
      console.log('modified User: ');
      dbHandler.database.findOne({ _id: roomId }, (err, room) => {
        let i = room.users.findIndex(user => user.id == modifiedUser.id);
        room.users[i] = modifiedUser;
        console.log(`modified user name: ${modifiedUser.name}`);
        io.of('/poker').in(roomId).emit("updateUsers", room.users);
        dbHandler.database.update({ _id: roomId }, { users: room.users }, (err, numReplaced) => {
          if (err) {
            console.log('An Error occured during update of modified User');
            console.log(err);
          }
          else {
            console.log('DB is updated - Modified User');
            console.log(numReplaced)
          }
        });
      })
    });
    socket.on('calculate', roomId => {
      console.log('calculate socket is called');
      dbHandler.database.findOne({_id:roomId},(err,room) => {
        if(room && room.users){
          let lengthOfUsers = room.users.length;
          let sum = 0;
          room.users.forEach(user => {
            sum+=user.score;
          });
          let average = sum/lengthOfUsers;
          io.of('/poker').in(roomId).emit('calculate',average);
        }
      });
    })
  });
  socket.on('disconnect', () => {
    console.log(`user: ${userName} | userId:${userId} is disconnected from ${roomId}`);
    dbHandler.database.findOne({ _id: roomId }, (err, room) => {
      if (err) {
        console.log(`socket on disconnect; Error occured during dbHandler: `);
        console.log(err);
      }
      if (room && room.users) {
        let onlineUsers = room.users.filter(user => user.id != userId);
        dbHandler.database.update({ _id: roomId }, { users: onlineUsers }, (err, numReplaced) => {
        });
        if(room.users.length == 0 ){
          dbHandler.database.update({ _id: roomId }, { occupied: false }, (err, numReplaced) => {
          })
        }
        io.of('/poker').in(roomId).emit("newUser", onlineUsers);
      }
    });
  });

});
// })
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
